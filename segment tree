vector<int> segtree;

void buildsegtree(vector<int>& v,int& n){
    
    while(__builtin_popcount(n)!=1){
        v.push_back(0);
        n++;
    }
    segtree.resize(2*n);
    for(int i=0;i<n;i++){
        segtree[n+i]=v[i];
    }
    for(int i=n-1;i>0;i--){
        segtree[i]=segtree[2*i]+segtree[2*i+(1)];
    }

}

int sum(int i,int l,int r,int xl,int xr){
    
    int mid=(l+r)/2;
    if(xl<=l&&xr>=r){
        return segtree[i];
    }
    else if(xr<l||xl>r){
        return 0;
    }
    else{
        return sum(2*i,l,mid,xl,xr)+sum(2*i+(1),mid+1,r,xl,xr);
    }

}

void changenum(int a,int b,int n){                              // DYNAMIC RANGE MINIMUM THROUGH THIS BECAUSE YOU HAVE TO GO BOTTOM UP REMEMBER
    segtree[n+a-1]=b;                                           // REFER CSES IF IN DOUBT
    int curr=(n+a-1);
    while(curr>=1){
        curr/=2;
        segtree[curr]=min(segtree[2*curr],segtree[2*curr+(1)]);
    }
}

void changenum(int i,int l,int r,int index,int change){

    int mid=(l+r)/2;
    if((index==l)&&(index==r)){
        segtree[i]+=change;
        return;
    }
    else if((index>l-1)&&(index<r+1)){
        segtree[i]+=change;
        changenum(2*i,l,mid,index,change);
        changenum(2*i+(1),mid+1,r,index,change);
    }
    else
        return;
}


void solve()
{
    int n,q;cin>>n>>q;
    vector<int> v(n);
    repp(n)cin>>v[i];

    buildsegtree(v,n);
    changenum(1,1,n,a,b);
    sum(1,1,n,a,b)
    
}

PLEASE SEE :
int n and vector<int> v are changed here which is why passed by reference



