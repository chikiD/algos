// to print in the form p*q^(-1) p is numerator and q is denominator
// A =denominator ; B = numerator ; C = mod
// A and B support all mod properties ie if A = ( ll * ll ) , A = ( ll * ll )%mod

//linearCongruence(denominator,numerator,mod);

long long ExtendedEuclidAlgo(long long a, long long b,long long& x, long long& y)
{
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    else {
        long long x1, y1;
        long long gcd= ExtendedEuclidAlgo(b, a % b, x1, y1);
        x = y1;
        y = x1 - floor(a / b) * y1;
        return gcd;
    }
}
ll linearCongruence(long long A,long long B,long long N)
{
    A = A % N;
    B = B % N;
    long long u = 0, v = 0;
    long long d = ExtendedEuclidAlgo(A, N, u, v);
    if (B % d != 0) {
        //cout << -1 << endl;
        return -1;
    }
    long long x0 = (u * (B / d)) % N;
    if (x0 < 0)
        x0 += N;
    for (long long i = 0; i <= d - 1; i++)
        return (x0 + i * (N / d)) % N ;
}
