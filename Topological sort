// MAIN ALGORITHM
 
vector<int> topo;
void dfs(int v) {                 
    visited[v] = true;
    for (int u : adj[v]) {
        if (!visited[u])
            dfs(u);
    }
    topo.push_back(v);
}

void topological_sort() {
    visited.assign(n, false);
    topo.clear();
    for (int i = 0; i < n; ++i) {
        if (!visited[i])
            dfs(i);
    }
    reverse(topo.begin(), topo.end());
}


// CODE TO CHECK IF TOPO SORT POSSIBLE ( IF CYCLE IN DIRECTED GRAPH )


bool visited1[MAX_N],x;      // returns true if cycle present
bool Dfs1(int curr){
 
    visited[curr]=true;
    visited1[curr]=true;
 
    for(auto &itr:adj[curr]){
 
        if(visited1[itr])
            x=true;
        else
            DFS1(itr);
    }
    
    visited1[curr]=false;
}
 
bool Dfs(int n){

    x=false;
    for(int i=1;i<n+1;i++){
        if(!visited[i]){
            {
                Dfs1(i);
                if(x==true){
                    return true;
                }
            }
        }
    }
    return false;
}
